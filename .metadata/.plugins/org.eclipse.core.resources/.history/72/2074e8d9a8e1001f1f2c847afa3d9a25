package com.cts.sms.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cts.sms.entity.Course;
import com.cts.sms.feign.CourseInterface;
import com.cts.sms.repository.CourseRepository;

@Service
public class CourseServiceImpl implements CourseService{
	
	@Autowired
	CourseRepository courseRepository;
	
	@Autowired
	CourseInterface courseInterface;

	@Override
    public Course addCourse(Course course) {
        return courseRepository.save(course);
    }

    @Override
    public List<Course> getAllCourses() {
        return courseRepository.findAll();
    }

    @Override
    public Optional<Course> getCourseById(Integer id) {
        return courseRepository.findById(id);
    }

    @Override
    public Course updateCourse(Integer id, Course updatedCourse) {
        return courseRepository.findById(id).map(course -> {
            course.setCourseName(updatedCourse.getCourseName());
            course.setDescription(updatedCourse.getDescription());
            course.setDuration(updatedCourse.getDuration());
            return courseRepository.save(course);
        }).orElseThrow(() -> new RuntimeException("Course not found with ID: " + id));
    }

    @Override
    public void deleteCourse(Integer id) {
        courseRepository.deleteById(id);
    }

    @Override
    public String enrollStudent(int courseId, int studentId) {
        // Check if Student Exists in Student Microservice
        boolean studentExists = courseInterface.doesStudentExist(studentId);

        if (!studentExists) {
            throw new RuntimeException("Student with ID " + studentId + " does not exist!");
        }

        // Enroll student if they exist
        Optional<Course> courseOptional = courseRepository.findById(courseId);
        if (courseOptional.isPresent()) {
            Course course = courseOptional.get();
            course.getStudentsEnrolled().add(studentId);
            courseRepository.save(course);
            return "Student " + studentId + " enrolled successfully!";
        } else {
            throw new RuntimeException("Course not found!");
        }
    }

}
