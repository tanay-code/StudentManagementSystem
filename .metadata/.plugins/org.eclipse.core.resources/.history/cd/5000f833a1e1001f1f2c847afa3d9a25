package com.cts.sms.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cts.sms.entity.Course;
import com.cts.sms.service.CourseService;

@RestController
@RequestMapping("/courses")
public class CourseController {
	
	@Autowired
    private CourseService courseService;

    @PostMapping("/addCourse")  // http://localhost:8081/courses/addCourse
    public ResponseEntity<Course> addCourse(@RequestBody Course course) {
        return ResponseEntity.ok(courseService.addCourse(course));
    }


    @GetMapping("/getAll") // http://localhost:8081/courses/getAll
    public ResponseEntity<List<Course>> getAllCourses() {
        return ResponseEntity.ok(courseService.getAllCourses());
    }


    @GetMapping("/getById/{id}") // http://localhost:8081/courses/getById/1
    public ResponseEntity<Course> getCourseById(@PathVariable int id) {
        Optional<Course> course = courseService.getCourseById(id);
        return course.map(ResponseEntity::ok)
                     .orElseGet(() -> ResponseEntity.notFound().build());
    }


    @PutMapping("/updateCourse/{id}") // http://localhost:8081/courses/updateCourse/1
    public ResponseEntity<Course> updateCourse(@PathVariable int id, @RequestBody Course course) {
        return ResponseEntity.ok(courseService.updateCourse(id, course));
    }


    @DeleteMapping("/deleteCourse/{id}") // http://localhost:8081/courses/deleteCourse/1
    public ResponseEntity<Void> deleteCourse(@PathVariable int id) {
        courseService.deleteCourse(id);
        return ResponseEntity.noContent().build();
    }
//
//    // Enroll Student
//    @PostMapping("/{courseId}/enroll/{studentId}")
//    public ResponseEntity<String> enrollStudent(@PathVariable Long courseId, @PathVariable Long studentId) {
//        courseService.enrollStudent(courseId, studentId);
//        return ResponseEntity.ok("Student " + studentId + " enrolled in Course " + courseId);
//    }
}
